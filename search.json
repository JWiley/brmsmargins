[{"path":"https://joshuawiley.com/brmsmargins/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://joshuawiley.com/brmsmargins/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://joshuawiley.com/brmsmargins/LICENSE.html","id":"0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://joshuawiley.com/brmsmargins/LICENSE.html","id":"1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://joshuawiley.com/brmsmargins/LICENSE.html","id":"2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://joshuawiley.com/brmsmargins/LICENSE.html","id":"3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://joshuawiley.com/brmsmargins/LICENSE.html","id":"4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://joshuawiley.com/brmsmargins/LICENSE.html","id":"5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://joshuawiley.com/brmsmargins/LICENSE.html","id":"6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://joshuawiley.com/brmsmargins/LICENSE.html","id":"7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://joshuawiley.com/brmsmargins/LICENSE.html","id":"8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://joshuawiley.com/brmsmargins/LICENSE.html","id":"9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://joshuawiley.com/brmsmargins/LICENSE.html","id":"10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://joshuawiley.com/brmsmargins/LICENSE.html","id":"11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://joshuawiley.com/brmsmargins/LICENSE.html","id":"12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://joshuawiley.com/brmsmargins/LICENSE.html","id":"13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://joshuawiley.com/brmsmargins/LICENSE.html","id":"14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://joshuawiley.com/brmsmargins/LICENSE.html","id":"15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://joshuawiley.com/brmsmargins/LICENSE.html","id":"16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://joshuawiley.com/brmsmargins/LICENSE.html","id":"17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://joshuawiley.com/brmsmargins/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://joshuawiley.com/brmsmargins/articles/fixed-effects-marginaleffects.html","id":"what-are-marginal-effects","dir":"Articles","previous_headings":"","what":"What are marginal effects?","title":"Marginal Effects for Fixed Effects Models","text":"Marginal effects can used describe outcome predicted change change predictor (predictors). derivative. convenience, typically calculated numerically rather analytically. motivate marginal effects, can look regression models fit frequentist framework simplicity speed. use mtcars dataset built R. First, can look linear regression model association mpg hp. can see estimated regression coefficient mpg. linear models interactions, (non linear) transformations, linear link function, regression coefficient predicted change outcome one unit change predictor, regardless values. example, can look predicted difference outcome one unit difference mpg 0 1, holding = 0. can look estimate moving mpg 10 11 instead 0 1, holding = 1. quantities identical. case, regression coefficient can interpreted marginal effect: expected change outcome one unit shift mpg, regardless value regardless values mpg evaluated. convenient property hold many types models. Next consider logistic regression model. regression coefficient, shown , log odds scale, probability scale. convenient interpretation, log odds scale scale outcome. can find predicted differences probability scale. moving mpg 10 11 holding = 0. can look estimate moving mpg 20 21 instead 10 11 holding = 0. can look estimate moving mpg 20 21 , time holding = 1. estimates case differ. association mpg probability vs linear. Marginal effects provide way get results response scale, can aid interpretation. common type marginal effect average marginal effect (AME). calculate AME numerically, can get predicted probabilities model every observation dataset. continuous variables, might use small difference approximate derivative. categorical variables, might calculate discrete difference.","code":"m.linear <- lm(hp ~ am + mpg, data = mtcars)  coef(m.linear)[\"mpg\"] #>       mpg  #> -11.19988 yhat <- predict(   m.linear,   newdata = data.frame(am = 0, mpg = c(0, 1)),   type = \"response\")  diff(yhat) #>         2  #> -11.19988 yhat <- predict(   m.linear,   newdata = data.frame(am = 1, mpg = c(10, 11)),   type = \"response\")  diff(yhat) #>         2  #> -11.19988 m.logistic <- glm(vs ~ am + mpg, data = mtcars, family = binomial())  coef(m.logistic)[\"mpg\"] #>       mpg  #> 0.6809205 yhat <- predict(   m.logistic,   newdata = data.frame(am = 0, mpg = c(10, 11)),   type = \"response\")  diff(yhat) #>           2  #> 0.002661989 yhat <- predict(   m.logistic,   newdata = data.frame(am = 0, mpg = c(20, 21)),   type = \"response\")  diff(yhat) #>         2  #> 0.1175344 yhat <- predict(   m.logistic,   newdata = data.frame(am = 1, mpg = c(20, 21)),   type = \"response\")  diff(yhat) #>          2  #> 0.08606869"},{"path":"https://joshuawiley.com/brmsmargins/articles/fixed-effects-marginaleffects.html","id":"average-marginal-effect-ame","dir":"Articles","previous_headings":"What are marginal effects?","what":"Average Marginal Effect (AME)","title":"Marginal Effects for Fixed Effects Models","text":"example continuous AME. h value near zero used numerical derivative. take values observed dataset first set predicted probabilities. take observed values + h calculate new predicted probabilities. difference, divided h “instantaneous” (.e., derivative) probability scale one unit shift predictor, mpg, person. average , get AME. example discrete AME. variable, takes two values: 0 1. calculate predicted probabilities everyone = 0 everyone = 1. examples, averaging across different values observed dataset. frequentist framework, additional details needed calculate uncertainty intervals. Bayesian framework, uncertainty intervals can calculated readily summarizing posterior.","code":"h <- .001  nd.1 <- nd.0 <- model.frame(m.logistic) nd.1$mpg <- nd.1$mpg + h  yhat.0 <- predict(   m.logistic,   newdata = nd.0,   type = \"response\")  yhat.1 <- predict(   m.logistic,   newdata = nd.1,   type = \"response\")  mean((yhat.1 - yhat.0) / h) #> [1] 0.06922997 nd.1 <- nd.0 <- model.frame(m.logistic) nd.0$am <- 0 nd.1$am <- 1  yhat.0 <- predict(   m.logistic,   newdata = nd.0,   type = \"response\")  yhat.1 <- predict(   m.logistic,   newdata = nd.1,   type = \"response\")  mean((yhat.1 - yhat.0)) #> [1] -0.2618203"},{"path":"https://joshuawiley.com/brmsmargins/articles/fixed-effects-marginaleffects.html","id":"ames-for-logistic-regression","dir":"Articles","previous_headings":"","what":"AMEs for Logistic Regression","title":"Marginal Effects for Fixed Effects Models","text":"main function users use brmsmargins(). example calculating AMEs mpg . First fit logistic regression model using brms. Now can use brmsmargins(). give model object, data.frame values added, first 0, (0 + h), contrast matrix. default 99 percent credible interval, override 0.95. use highest density intervals, default. also selected “ETI” equal tail intervals. brmsmargins() return list posterior prediction, summary posterior predictions, posterior contrasts, summary posterior contrasts. just one contrast, multiple specified. Now can look calculate discrete AME. time use argument instead add argument want hold specific values, add 0 1 observed values. 0 1 meaningful values , also look summary posterior predictions. predictions average across values mpg. Note default, brmsmargins() uses model frame model object dataset. , however, can overridden. can give (valid) dataset add override chosen values average across predictions different rows dataset.","code":"bayes.logistic <- brm(   vs ~ am + mpg, data = mtcars,   family = \"bernoulli\", seed = 1234,   silent = 2, refresh = 0,   chains = 4L, cores = 4L, backend = \"cmdstanr\") #> Compiling Stan program... summary(bayes.logistic) #>  Family: bernoulli  #>   Links: mu = logit  #> Formula: vs ~ am + mpg  #>    Data: mtcars (Number of observations: 32)  #>   Draws: 4 chains, each with iter = 1000; warmup = 0; thin = 1; #>          total post-warmup draws = 4000 #>  #> Population-Level Effects:  #>           Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS #> Intercept   -16.13      5.56   -28.70    -7.35 1.00     1826     1853 #> am           -3.80      1.84    -7.83    -0.70 1.00     1663     1449 #> mpg           0.87      0.30     0.39     1.55 1.00     1702     1854 #>  #> Draws were sampled using sample(hmc). For each parameter, Bulk_ESS #> and Tail_ESS are effective sample size measures, and Rhat is the potential #> scale reduction factor on split chains (at convergence, Rhat = 1). h <- .001 ame1 <- brmsmargins(   bayes.logistic,   add = data.frame(mpg = c(0, 0 + h)),   contrasts = cbind(\"AME MPG\" = c(-1 / h, 1 / h)),   CI = 0.95, CIType = \"HDI\")  kable(ame1$ContrastSummary, digits = 3) ame2 <- brmsmargins(   bayes.logistic,   at = data.frame(am = c(0, 1)),   contrasts = cbind(\"AME am\" = c(-1, 1)),   CI = 0.95, CIType = \"HDI\")  kable(ame2$Summary, digits = 3) kable(ame2$ContrastSummary)"},{"path":"https://joshuawiley.com/brmsmargins/articles/fixed-effects-marginaleffects.html","id":"ames-for-poisson-regression","dir":"Articles","previous_headings":"","what":"AMEs for Poisson Regression","title":"Marginal Effects for Fixed Effects Models","text":"short example Poisson regression used count outcomes. use dataset drawn : https://stats.oarc.ucla.edu/r/dae/poisson-regression/ AME continuous variable, using default CI interval type. AME categorical variable. calculate pairwise contrasts three program types. predicted number awards.","code":"d <- fread(\"https://stats.oarc.ucla.edu/stat/data/poisson_sim.csv\") d[, prog := factor(prog, levels = 1:3, labels = c(\"General\", \"Academic\", \"Vocational\"))]  bayes.poisson <- brm(   num_awards ~ prog + math, data = d,   family = \"poisson\", seed = 1234,   silent = 2, refresh = 0,   chains = 4L, cores = 4L, backend = \"cmdstanr\") #> Compiling Stan program... summary(bayes.poisson) #>  Family: poisson  #>   Links: mu = log  #> Formula: num_awards ~ prog + math  #>    Data: d (Number of observations: 200)  #>   Draws: 4 chains, each with iter = 1000; warmup = 0; thin = 1; #>          total post-warmup draws = 4000 #>  #> Population-Level Effects:  #>                Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS #> Intercept         -5.33      0.67    -6.70    -4.06 1.00     2202     1923 #> progAcademic       1.14      0.37     0.45     1.91 1.00     1957     2210 #> progVocational     0.38      0.45    -0.49     1.30 1.00     2114     1882 #> math               0.07      0.01     0.05     0.09 1.00     2238     2373 #>  #> Draws were sampled using sample(hmc). For each parameter, Bulk_ESS #> and Tail_ESS are effective sample size measures, and Rhat is the potential #> scale reduction factor on split chains (at convergence, Rhat = 1). h <- .001 ame1.p <- brmsmargins(   bayes.poisson,   add = data.frame(math = c(0, 0 + h)),   contrasts = cbind(\"AME math\" = c(-1 / h, 1 / h)))  kable(ame1.p$ContrastSummary, digits = 3) ame2.p <- brmsmargins(   bayes.poisson,   at = data.frame(     prog = factor(1:3,                   labels = c(\"General\", \"Academic\", \"Vocational\"))),   contrasts = cbind(     \"AME General v Academic\" = c(1, -1, 0),     \"AME General v Vocational\" = c(1, 0, -1),     \"AME Academic v Vocational\" = c(0, 1, -1)))      kable(ame2.p$Summary, digits = 3) kable(ame2.p$ContrastSummary, digits = 3)"},{"path":"https://joshuawiley.com/brmsmargins/articles/fixed-effects-marginaleffects.html","id":"ames-for-negative-binomial-regression","dir":"Articles","previous_headings":"","what":"AMEs for Negative Binomial Regression","title":"Marginal Effects for Fixed Effects Models","text":"short example Negative Binomial regression used count outcomes. use setup Poisson regression example. AME continuous variable, using default CI interval type. AME categorical variable. calculate pairwise contrasts three program types. predicted number awards.","code":"d <- read.csv(\"https://stats.oarc.ucla.edu/stat/data/poisson_sim.csv\") d$prog <- factor(d$prog, levels = 1:3, labels = c(\"General\", \"Academic\", \"Vocational\"))  bayes.nb <- brm(   num_awards ~ prog + math, data = d,   family = \"negbinomial\", seed = 1234,   silent = 2, refresh = 0,   chains = 4L, cores = 4L, backend = \"cmdstanr\") #> Compiling Stan program... summary(bayes.nb) #>  Family: negbinomial  #>   Links: mu = log; shape = identity  #> Formula: num_awards ~ prog + math  #>    Data: d (Number of observations: 200)  #>   Draws: 4 chains, each with iter = 1000; warmup = 0; thin = 1; #>          total post-warmup draws = 4000 #>  #> Population-Level Effects:  #>                Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS #> Intercept         -5.38      0.71    -6.79    -3.98 1.00     2747     2510 #> progAcademic       1.13      0.37     0.43     1.87 1.00     2565     2476 #> progVocational     0.38      0.47    -0.54     1.27 1.00     2547     2094 #> math               0.07      0.01     0.05     0.09 1.00     2846     2549 #>  #> Family Specific Parameters:  #>       Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS #> shape    20.34     37.45     1.95   115.92 1.00     2723     2398 #>  #> Draws were sampled using sample(hmc). For each parameter, Bulk_ESS #> and Tail_ESS are effective sample size measures, and Rhat is the potential #> scale reduction factor on split chains (at convergence, Rhat = 1). h <- .001 ame1.nb <- brmsmargins(   bayes.nb,   add = data.frame(math = c(0, 0 + h)),   contrasts = cbind(\"AME math\" = c(-1 / h, 1 / h)))  kable(ame1.nb$ContrastSummary, digits = 3) ame2.nb <- brmsmargins(   bayes.nb,   at = data.frame(     prog = factor(1:3,                   labels = c(\"General\", \"Academic\", \"Vocational\"))),   contrasts = cbind(     \"AME General v Academic\" = c(1, -1, 0),     \"AME General v Vocational\" = c(1, 0, -1),     \"AME Academic v Vocational\" = c(0, 1, -1)))      kable(ame2.nb$Summary, digits = 3) kable(ame2.nb$ContrastSummary, digits = 3)"},{"path":"https://joshuawiley.com/brmsmargins/articles/fixed-effects-marginaleffects.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"Marginal Effects for Fixed Effects Models","text":"references may useful. Norton, E. C., Dowd, B. E., & Maciejewski, M. L. (2019). Marginal effects—quantifying effect changes risk factors logistic regression models. JAMA, 321(13), 1304-1305. Mize, T. D., Doan, L., & Long, J. S. (2019). general framework comparing predictions marginal effects across models. Sociological Methodology, 49(1), 152-189.","code":""},{"path":"https://joshuawiley.com/brmsmargins/articles/location-scale-marginaleffects.html","id":"ames-for-fixed-effects-location-scale-models","dir":"Articles","previous_headings":"","what":"AMEs for Fixed Effects Location Scale Models","title":"Marginal Effects for Location Scale Models","text":"start , look fixed effects location scale model. simulate dataset. Now can use brmsmargins(). default, location parameter, mean. Gaussian linear model transformations interactions, AMEs regression coefficients. example continuous AME. AME discrete / categorical predictors. brms scale parameter Gaussian models, sigma uses log link function. Therefore back transformed original scale, AMEs regression coefficients link scale (log transformed). specify want AMEs sigma setting: dpar = \"sigma\". continuous example. discrete / categorical example. results comparable mean difference standard deviation grp. Note general, may closely align. However, instance x grp simulated uncorrelated, simple unadjusted results match regression results closely. [1] 4.976021","code":"d <- withr::with_seed(   seed = 12345, code = {     nObs <- 1000L     d <- data.table(       grp = rep(0:1, each = nObs / 2L),       x = rnorm(nObs, mean = 0, sd = 0.25))     d[, y := rnorm(nObs,                    mean = x + grp,                    sd = exp(1 + x + grp))]     copy(d)   })  ls.fe <- brm(bf(   y ~ 1 + x + grp,   sigma ~ 1 + x + grp),   family = \"gaussian\",   data = d, seed = 1234,   silent = 2, refresh = 0,   chains = 4L, cores = 4L, backend = \"cmdstanr\") #> Compiling Stan program... summary(ls.fe) #>  Family: gaussian  #>   Links: mu = identity; sigma = log  #> Formula: y ~ 1 + x + grp  #>          sigma ~ 1 + x + grp #>    Data: d (Number of observations: 1000)  #>   Draws: 4 chains, each with iter = 1000; warmup = 0; thin = 1; #>          total post-warmup draws = 4000 #>  #> Population-Level Effects:  #>                 Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS #> Intercept          -0.09      0.13    -0.34     0.15 1.00     4494     3498 #> sigma_Intercept     1.01      0.03     0.95     1.07 1.00     4690     2937 #> x                   1.62      0.46     0.74     2.48 1.00     4563     3023 #> grp                 1.01      0.33     0.36     1.66 1.00     3338     3273 #> sigma_x             0.85      0.09     0.67     1.02 1.00     5705     2988 #> sigma_grp           1.01      0.04     0.92     1.09 1.00     4712     2521 #>  #> Draws were sampled using sample(hmc). For each parameter, Bulk_ESS #> and Tail_ESS are effective sample size measures, and Rhat is the potential #> scale reduction factor on split chains (at convergence, Rhat = 1). h <- .001 ame1 <- brmsmargins(   ls.fe,   add = data.frame(x = c(0, h)),   contrasts = cbind(\"AME x\" = c(-1 / h, 1 / h)),   CI = 0.95, CIType = \"ETI\",   effects = \"fixedonly\")  knitr::kable(ame1$ContrastSummary, digits = 3) ame2 <- brmsmargins(   ls.fe,   at = data.frame(grp = c(0, 1)),   contrasts = cbind(\"AME grp\" = c(-1, 1)),   CI = 0.95, CIType = \"ETI\",   effects = \"fixedonly\")  knitr::kable(ame2$ContrastSummary, digits = 3) h <- .001 ame3 <- brmsmargins(   ls.fe,   add = data.frame(x = c(0, h)),   contrasts = cbind(\"AME x\" = c(-1 / h, 1 / h)),   CI = 0.95, CIType = \"ETI\", dpar = \"sigma\",   effects = \"fixedonly\")  knitr::kable(ame3$ContrastSummary, digits = 3) ame4 <- brmsmargins(   ls.fe,   at = data.frame(grp = c(0, 1)),   contrasts = cbind(\"AME grp\" = c(-1, 1)),   CI = 0.95, CIType = \"ETI\", dpar = \"sigma\",   effects = \"fixedonly\")  knitr::kable(ame4$ContrastSummary, digits = 3) d[, .(SD = sd(y)), by = grp][, diff(SD)]"},{"path":"https://joshuawiley.com/brmsmargins/articles/location-scale-marginaleffects.html","id":"ames-for-mixed-effects-location-scale-models","dir":"Articles","previous_headings":"","what":"AMEs for Mixed Effects Location Scale Models","title":"Marginal Effects for Location Scale Models","text":"simulate multilevel location scale data model fit mixed effects location scale model. Note model achieved good convergence, already took 6 minutes run, sake demonstration continue. practice, one want make adjustments ensure good convergence adequate effective sample size. use brmsmargins() similar mixed effects models. details see vignette marginal effects mixed effects models. example treating x continuous using fixed effects AME scale parameter, sigma. example , time integrating random effects, results considerable difference estimate AME. example treating x discrete, using fixed effects. example , time integrating random effects, likely appropriate estimate use cases. also relatively close calculating individual standard deviations taking differences, averaging.","code":"dmixed <- withr::with_seed(   seed = 12345, code = {     nGroups <- 100     nObs <- 20     theta.location <- matrix(rnorm(nGroups * 2), nrow = nGroups, ncol = 2)     theta.location[, 1] <- theta.location[, 1] - mean(theta.location[, 1])     theta.location[, 2] <- theta.location[, 2] - mean(theta.location[, 2])     theta.location[, 1] <- theta.location[, 1] / sd(theta.location[, 1])     theta.location[, 2] <- theta.location[, 2] / sd(theta.location[, 2])     theta.location <- theta.location %*% chol(matrix(c(1.5, -.25, -.25, .5^2), 2))     theta.location[, 1] <- theta.location[, 1] - 2.5     theta.location[, 2] <- theta.location[, 2] + 1     dmixed <- data.table(       x = rep(rep(0:1, each = nObs / 2), times = nGroups))     dmixed[, ID := rep(seq_len(nGroups), each = nObs)]      for (i in seq_len(nGroups)) {       dmixed[ID == i, y := rnorm(         n = nObs,         mean = theta.location[i, 1] + theta.location[i, 2] * x,         sd = exp(1 + theta.location[i, 1] + theta.location[i, 2] * x))         ]     }     copy(dmixed)   })  ls.me <- brm(bf(   y ~ 1 + x + (1 + x | ID),   sigma ~ 1 + x + (1 + x | ID)),   family = \"gaussian\",   data = dmixed, seed = 1234,   silent = 2, refresh = 0,   chains = 4L, cores = 4L, backend = \"cmdstanr\") #> Compiling Stan program... #> 304 of 4000 (8.0%) transitions hit the maximum treedepth limit of 10 or 2^10-1 leapfrog steps. #> Trajectories that are prematurely terminated due to this limit will result in slow exploration. #> Increasing the max_treedepth limit can avoid this at the expense of more computation. #> If increasing max_treedepth does not remove warnings, try to reparameterize the model. summary(ls.me) #> Warning: Parts of the model have not converged (some Rhats are > 1.05). Be #> careful when analysing the results! We recommend running more iterations and/or #> setting stronger priors. #>  Family: gaussian  #>   Links: mu = identity; sigma = log  #> Formula: y ~ 1 + x + (1 + x | ID)  #>          sigma ~ 1 + x + (1 + x | ID) #>    Data: dmixed (Number of observations: 2000)  #>   Draws: 4 chains, each with iter = 1000; warmup = 0; thin = 1; #>          total post-warmup draws = 4000 #>  #> Group-Level Effects:  #> ~ID (Number of levels: 100)  #>                              Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS #> sd(Intercept)                    1.20      0.09     1.04     1.38 1.02      204 #> sd(x)                            0.43      0.04     0.35     0.52 1.01      618 #> sd(sigma_Intercept)              1.26      0.09     1.09     1.45 1.00      410 #> sd(sigma_x)                      0.50      0.05     0.40     0.61 1.00     1352 #> cor(Intercept,x)                -0.40      0.12    -0.62    -0.15 1.01      421 #> cor(sigma_Intercept,sigma_x)    -0.35      0.11    -0.55    -0.14 1.00     1463 #>                              Tail_ESS #> sd(Intercept)                     482 #> sd(x)                            1217 #> sd(sigma_Intercept)               998 #> sd(sigma_x)                      2047 #> cor(Intercept,x)                  950 #> cor(sigma_Intercept,sigma_x)     1983 #>  #> Population-Level Effects:  #>                 Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS #> Intercept          -2.55      0.12    -2.77    -2.32 1.06      114      293 #> sigma_Intercept    -1.48      0.12    -1.71    -1.23 1.03      163      392 #> x                   0.94      0.06     0.82     1.04 1.00      651     1184 #> sigma_x             0.97      0.06     0.85     1.10 1.00     1117     1807 #>  #> Draws were sampled using sample(hmc). For each parameter, Bulk_ESS #> and Tail_ESS are effective sample size measures, and Rhat is the potential #> scale reduction factor on split chains (at convergence, Rhat = 1). h <- .001 ame1a.lsme <- brmsmargins(   ls.me,   add = data.frame(x = c(0, h)),   contrasts = cbind(\"AME x\" = c(-1 / h, 1 / h)),   dpar = \"sigma\",   effects = \"fixedonly\")  knitr::kable(ame1a.lsme$ContrastSummary, digits = 3) h <- .001 ame1b.lsme <- brmsmargins(   ls.me,   add = data.frame(x = c(0, h)),   contrasts = cbind(\"AME x\" = c(-1 / h, 1 / h)),   dpar = \"sigma\",   effects = \"integrateoutRE\", k = 100L, seed = 1234)  knitr::kable(ame1b.lsme$ContrastSummary, digits = 3) ame2a.lsme <- brmsmargins(   ls.me,   at = data.frame(x = c(0, 1)),   contrasts = cbind(\"AME x\" = c(-1, 1)),   dpar = \"sigma\",   effects = \"fixedonly\")  knitr::kable(ame2a.lsme$ContrastSummary) ame2b.lsme <- brmsmargins(   ls.me,   at = data.frame(x = c(0, 1)),   contrasts = cbind(\"AME x\" = c(-1, 1)),   dpar = \"sigma\",   effects = \"integrateoutRE\", k = 100L, seed = 1234)  knitr::kable(ame2b.lsme$ContrastSummary) dmixed[, .(SD = sd(y)), by = .(ID, x)        ][, .(SDdiff = diff(SD)), by = ID][, mean(SDdiff)] #> [1] 0.6281889"},{"path":"https://joshuawiley.com/brmsmargins/articles/mixed-effects-marginaleffects.html","id":"integrating-out-random-effects","dir":"Articles","previous_headings":"","what":"Integrating out Random Effects","title":"Marginal Effects for Mixed Effects Models","text":"random intercept logistic regression model binary (0/1) outcome, \\(Y\\) observed \\(^{th}\\) assessment \\(j^{th}\\) person \\(p\\) variables included regression model can written : \\[ \\hat{\\pi}_{ij} = g \\left(P \\left( Y_{ij} = 1 \\Big| X_{ij} = x_{ij}, u_j \\right) \\right) = \\beta_0 + \\sum_{k = 1}^p x_{ij,k} \\beta_k + u_j  \\] \\(g(\\cdot)\\) indicates link function, logit \\[ \\mu = g(\\pi) = ln\\left(\\frac{\\pi}{1 - \\pi}\\right) \\] \\(g^{-1}(\\cdot)\\) inverse link function: \\[ \\pi = g^{-1}(\\mu) = \\frac{1}{1 + exp(-\\mu)} \\] conditional predicted probability, conditional random effect can calculated : \\[ \\hat{\\pi}_{ij}(u_j = 0) =    P\\left(Y_{ij} = 1 \\Big| X_{ij} = x_{ij}, u_j = 0 \\right) =    g^{-1} \\left( \\beta_0 + \\sum_{k = 1}^p x_{ij,k} \\beta_k + 0 \\right) \\] However, correctly calculate prediction marginal random effects, random effects must integrated . set specific value set mean (0). \\[ \\hat{\\pi}_{ij} =    P\\left(Y_{ij} = 1 \\Big| X_{ij} = x_{ij} \\right) =    \\int_{-\\infty}^{\\infty} g^{-1} \\left( \\beta_0 + \\sum_{k = 1}^p x_{ij,k} \\beta_k + u \\right)f(u)du \\] Integrating random effects analytically can quickly become complex. example, rapidly becomes complex multiple random effects, one grouping clustering variable. also can become complex different distributions used / assumed. Monte Carlo integration convenient, numerical approach uses random samples approximate integral. Continuing simple example logistic regression model random effect random intercept, \\(u_j\\) assume \\(u_j \\sim \\mathcal{N}(0, \\sigma^{2}_u)\\), draw \\(Q\\) random samples, say 100, \\(\\mathcal{N}(0, \\sigma^{2}_u)\\), call \\(RE_a\\), Monte Carlo integration : \\[ \\hat{\\pi}_{ij} =    P\\left(Y_{ij} = 1 \\Big| X_{ij} = x_{ij} \\right) =    \\frac{\\displaystyle \\sum_{= 1}^{Q} g^{-1} \\left( \\beta_0 + \\sum_{k = 1}^p x_{ij,k} \\beta_k + RE_a \\right)}{Q} \\] approach works generalized linear mixed models, although outcome probability, necessarily, whatever result inverse link function . Bayesian framework, approach repeated posterior draw regression coefficients \\(RE_a\\) differs. repeated across posterior draw, large number random draws, \\(Q\\), Monte Carlo integration probably needed. Although modest number, say \\(Q = 100\\), relatively large amount simulation error, random error repeated across typically thousands posterior draws, impact likely diminished. marginal predictions, can calculate marginal effects using numerical derivatives : \\[ \\frac{P\\left(Y_{ij} = 1 \\Big| X_{ij} = x_{ij} + h \\right) - P\\left(Y_{ij} = 1 \\Big| X_{ij} = x_{ij} \\right)}{h} \\] continuous variable provides approximation derivative, often quite good long \\(h\\) sufficiently small.","code":""},{"path":"https://joshuawiley.com/brmsmargins/articles/mixed-effects-marginaleffects.html","id":"using-brmsmargins","dir":"Articles","previous_headings":"","what":"Using brmsmargins()","title":"Marginal Effects for Mixed Effects Models","text":"simpler introduction brief overview motivation available vignette fixed effects . fixed random effects, calculating average marginal effects (AMEs) complicated. Generally, predictions conditional random effects. deal , need integrate random effects every prediction. Please note quite computationally demanding, least currently implemented. every predicted value posterior draw, random samples model estimated random effects distribution drawn, added, back transformed, averaged. Thus, wanted AMEs across dataset 1,000 people, 2,000 posterior draws, wanted use 100 points numerical integration, total 200 million (1,000 x 2,000 x 100) values calculated. monte carlo integration implemented C++ code try help speed process, “quick” also may memory intensive. complexity involved, limited types mixed effects models supported.","code":""},{"path":"https://joshuawiley.com/brmsmargins/articles/mixed-effects-marginaleffects.html","id":"mixed-effects-logistic-regression","dir":"Articles","previous_headings":"","what":"Mixed Effects Logistic Regression","title":"Marginal Effects for Mixed Effects Models","text":"simulate multilevel binary data mixed effects logistic regression model individual differences intercept slope.","code":"d <- withr::with_seed(   seed = 12345, code = {     nGroups <- 100     nObs <- 20     theta.location <- matrix(rnorm(nGroups * 2), nrow = nGroups, ncol = 2)     theta.location[, 1] <- theta.location[, 1] - mean(theta.location[, 1])     theta.location[, 2] <- theta.location[, 2] - mean(theta.location[, 2])     theta.location[, 1] <- theta.location[, 1] / sd(theta.location[, 1])     theta.location[, 2] <- theta.location[, 2] / sd(theta.location[, 2])     theta.location <- theta.location %*% chol(matrix(c(1.5, -.25, -.25, .5^2), 2))     theta.location[, 1] <- theta.location[, 1] - 2.5     theta.location[, 2] <- theta.location[, 2] + 1     d <- data.table(       x = rep(rep(0:1, each = nObs / 2), times = nGroups))     d[, ID := rep(seq_len(nGroups), each = nObs)]      for (i in seq_len(nGroups)) {       d[ID == i, y := rbinom(         n = nObs,         size = 1,         prob = plogis(theta.location[i, 1] + theta.location[i, 2] * x))         ]     }     copy(d)   })  mlogit <- brms::brm(   y ~ 1 + x + (1 + x | ID), family = \"bernoulli\",   data = d, seed = 1234,   silent = 2, refresh = 0,   chains = 4L, cores = 4L, backend = \"cmdstanr\") #> Compiling Stan program... summary(mlogit) #>  Family: bernoulli  #>   Links: mu = logit  #> Formula: y ~ 1 + x + (1 + x | ID)  #>    Data: d (Number of observations: 2000)  #>   Draws: 4 chains, each with iter = 1000; warmup = 0; thin = 1; #>          total post-warmup draws = 4000 #>  #> Group-Level Effects:  #> ~ID (Number of levels: 100)  #>                  Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS #> sd(Intercept)        1.18      0.19     0.85     1.59 1.00     1371     2302 #> sd(x)                0.53      0.28     0.04     1.07 1.01      338     1039 #> cor(Intercept,x)    -0.18      0.42    -0.83     0.81 1.00     1444     1313 #>  #> Population-Level Effects:  #>           Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS #> Intercept    -2.47      0.19    -2.87    -2.13 1.00     1678     2281 #> x             0.95      0.19     0.60     1.33 1.00     3021     2803 #>  #> Draws were sampled using sample(hmc). For each parameter, Bulk_ESS #> and Tail_ESS are effective sample size measures, and Rhat is the potential #> scale reduction factor on split chains (at convergence, Rhat = 1)."},{"path":"https://joshuawiley.com/brmsmargins/articles/mixed-effects-marginaleffects.html","id":"ames","dir":"Articles","previous_headings":"Mixed Effects Logistic Regression","what":"AMEs","title":"Marginal Effects for Mixed Effects Models","text":"Now can use brmsmargins(). default, use fixed effects. integrate random effects, specify effects = \"integrateoutRE\". number values used numerical integration set via argument, k, k = 100L, default. details : ?brmsmargins:::.predict can follow similar process getting discrete predictions x held 0 1. instance, summary predictions interesting well, since meaningfully different values x. also agree quite closely average probability different x values calculated data. summary predictions. Note integrating random effects, random seed quite important. seed argument specified, brmsmargins() randomly select one. matter generating predictions fixed effects, using random samples integrate random effects, different random seeds used different predictions, expect (small) differences even input data prediction. may issue predictions . However, numerically approximating derivative small difference predictions, h = .001 tiny differences magnified. see impact, consider example explicitly set multiple random seeds, one row data used predictions. cases, use exactly x = 0, difference due Monte Carlo variation , k = 10L small error, divided h = .001 becomes large, impossibly . disappears use seed row data used predictions. get zeros difference, expect. Note need specify seed row data. can specify one seed (rely brmsmargins() default), used rows data.","code":"h <- .001 ame1 <- brmsmargins(   mlogit,   add = data.frame(x = c(0, h)),   contrasts = cbind(\"AME x\" = c(-1 / h, 1 / h)),   effects = \"integrateoutRE\", k = 100L, seed = 1234)  knitr::kable(ame1$ContrastSummary, digits = 3) ame2 <- brmsmargins(   mlogit,   at = data.frame(x = c(0, 1)),   contrasts = cbind(\"AME x\" = c(-1, 1)),   effects = \"integrateoutRE\", k = 100L, seed = 1234) knitr::kable(ame2$Summary, digits = 3) knitr::kable(ame2$ContrastSummary, digits = 3) knitr::kable(d[, .(M = mean(y)), by = .(ID, x)][, .(M = mean(M)), by = x]) h <- .001 ame.error <- brmsmargins(   mlogit,   add = data.frame(x = c(0, 0)),   contrasts = cbind(\"AME x\" = c(-1 / h, 1 / h)),   effects = \"integrateoutRE\", k = 10L, seed = c(1234, 54321))  knitr::kable(ame.error$ContrastSummary, digits = 3) h <- .001 ame.noerror <- brmsmargins(   mlogit,   add = data.frame(x = c(0, 0)),   contrasts = cbind(\"AME x\" = c(-1 / h, 1 / h)),   effects = \"integrateoutRE\", k = 10L, seed = c(1234, 1234))  knitr::kable(ame.noerror$ContrastSummary, digits = 3)"},{"path":"https://joshuawiley.com/brmsmargins/articles/mixed-effects-marginaleffects.html","id":"marginal-coefficients","dir":"Articles","previous_headings":"Mixed Effects Logistic Regression","what":"Marginal Coefficients","title":"Marginal Effects for Mixed Effects Models","text":"fixed effects coefficients conditional random effects. aide interpretation, also can calculate marginal coefficients population averaged coefficients. function marginalcoef() uses method described Hedeker colleagues (2018). example comparison results using single level logistic regression ignores clustering data. Now can view compare results.","code":"## calculate marginal coefficients mc.logit <- marginalcoef(mlogit, CI = 0.95)  ## calculate single level logistic regression glm.logit <- glm(y ~ 1 + x, family = \"binomial\", data = d) glm.logit <- as.data.table(cbind(Est = coef(glm.logit), confint(glm.logit))) #> Waiting for profiling to be done... knitr::kable(cbind(   mc.logit$Summary[, .(     MargCoef = sprintf(\"%0.3f\", round(M, 3)),     MargCoefCI = sprintf(\"[%0.3f, %0.3f]\", round(LL, 3), round(UL, 3)))],   glm.logit[, .(     GLMCoef = sprintf(\"%0.3f\", round(Est, 3)),     GLMCI = sprintf(\"[%0.3f, %0.3f]\", round(`2.5 %`, 3), round(`97.5 %`, 3)))]))"},{"path":"https://joshuawiley.com/brmsmargins/articles/mixed-effects-marginaleffects.html","id":"mixed-effects-poisson-regression","dir":"Articles","previous_headings":"","what":"Mixed Effects Poisson Regression","title":"Marginal Effects for Mixed Effects Models","text":"simulate multilevel poisson data mixed effects poisson regression model individual differences intercept slope.","code":"dpoisson <- withr::with_seed(   seed = 12345, code = {     nGroups <- 100     nObs <- 20     theta.location <- matrix(rnorm(nGroups * 2), nrow = nGroups, ncol = 2)     theta.location[, 1] <- theta.location[, 1] - mean(theta.location[, 1])     theta.location[, 2] <- theta.location[, 2] - mean(theta.location[, 2])     theta.location[, 1] <- theta.location[, 1] / sd(theta.location[, 1])     theta.location[, 2] <- theta.location[, 2] / sd(theta.location[, 2])     theta.location <- theta.location %*% chol(matrix(c(1.5, -.25, -.25, .5^2), 2))     theta.location[, 1] <- theta.location[, 1] - 2.5     theta.location[, 2] <- theta.location[, 2] + 1     d <- data.table(       x = rep(rep(0:1, each = nObs / 2), times = nGroups))     d[, ID := rep(seq_len(nGroups), each = nObs)]      for (i in seq_len(nGroups)) {       d[ID == i, y := rpois(         n = nObs,         lambda = exp(theta.location[i, 1] + theta.location[i, 2] * x))         ]     }     copy(d)   })  mpois <- brms::brm(   y ~ 1 + x + (1 + x | ID), family = \"poisson\",   data = dpoisson, seed = 1234,   chains = 4L, cores = 4L, backend = \"cmdstanr\",   silent = 2, refresh = 0, adapt_delta = 0.99) #> Compiling Stan program... summary(mpois) #>  Family: poisson  #>   Links: mu = log  #> Formula: y ~ 1 + x + (1 + x | ID)  #>    Data: dpoisson (Number of observations: 2000)  #>   Draws: 4 chains, each with iter = 1000; warmup = 0; thin = 1; #>          total post-warmup draws = 4000 #>  #> Group-Level Effects:  #> ~ID (Number of levels: 100)  #>                  Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS #> sd(Intercept)        1.18      0.15     0.91     1.50 1.00     1362     2382 #> sd(x)                0.38      0.20     0.03     0.77 1.01      313      798 #> cor(Intercept,x)    -0.08      0.39    -0.74     0.79 1.00     1449     1348 #>  #> Population-Level Effects:  #>           Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS #> Intercept    -2.47      0.18    -2.84    -2.13 1.00     1373     2132 #> x             0.97      0.15     0.68     1.28 1.00     3100     2584 #>  #> Draws were sampled using sample(hmc). For each parameter, Bulk_ESS #> and Tail_ESS are effective sample size measures, and Rhat is the potential #> scale reduction factor on split chains (at convergence, Rhat = 1)."},{"path":"https://joshuawiley.com/brmsmargins/articles/mixed-effects-marginaleffects.html","id":"ames-1","dir":"Articles","previous_headings":"Mixed Effects Poisson Regression","what":"AMEs","title":"Marginal Effects for Mixed Effects Models","text":"use brmsmargins() way mixed effects logistic regression. example numeric derivative treating x continuous. example treating x discrete.","code":"h <- .001 ame1.pois <- brmsmargins(   mpois,   add = data.frame(x = c(0, h)),   contrasts = cbind(\"AME x\" = c(-1 / h, 1 / h)),   effects = \"integrateoutRE\", k = 100L, seed = 1234)  knitr::kable(ame1.pois$ContrastSummary, digits = 3) ame2.pois <- brmsmargins(   mpois,   at = data.frame(x = c(0, 1)),   contrasts = cbind(\"AME x\" = c(-1, 1)),   effects = \"integrateoutRE\", k = 100L, seed = 1234)  knitr::kable(ame2.pois$ContrastSummary)"},{"path":"https://joshuawiley.com/brmsmargins/articles/mixed-effects-marginaleffects.html","id":"marginal-coefficients-1","dir":"Articles","previous_headings":"Mixed Effects Poisson Regression","what":"Marginal Coefficients","title":"Marginal Effects for Mixed Effects Models","text":"Just mixed effects logistic regression, can calculate marginal population averaged coefficients mixed effects poisson regression using process described Hedeker colleagues (2018). example comparison results using single level poisson regression ignores clustering data. Now can view compare results.","code":"## calculate marginal coefficients mc.pois <- marginalcoef(mpois, CI = 0.95)  ## calculate single level logistic regression glm.pois <- glm(y ~ 1 + x, family = \"poisson\", data = d) glm.pois <- as.data.table(cbind(Est = coef(glm.pois), confint(glm.pois))) #> Waiting for profiling to be done... knitr::kable(cbind(   mc.pois$Summary[, .(     MargCoef = sprintf(\"%0.3f\", round(M, 3)),     MargCoefCI = sprintf(\"[%0.3f, %0.3f]\", round(LL, 3), round(UL, 3)))],   glm.pois[, .(     GLMCoef = sprintf(\"%0.3f\", round(Est, 3)),     GLMCI = sprintf(\"[%0.3f, %0.3f]\", round(`2.5 %`, 3), round(`97.5 %`, 3)))]))"},{"path":"https://joshuawiley.com/brmsmargins/articles/mixed-effects-marginaleffects.html","id":"mixed-effects-negative-binomial-regression","dir":"Articles","previous_headings":"","what":"Mixed Effects Negative Binomial Regression","title":"Marginal Effects for Mixed Effects Models","text":"Negative binomial models work way poisson models. use dataset, just demonstration.","code":"mnb <- brms::brm(   y ~ 1 + x + (1 + x | ID), family = \"negbinomial\",   data = dpoisson, seed = 1234,   chains = 4L, cores = 4L, backend = \"cmdstanr\",   silent = 2, refresh = 0, adapt_delta = 0.99) #> Compiling Stan program... summary(mnb) #>  Family: negbinomial  #>   Links: mu = log; shape = identity  #> Formula: y ~ 1 + x + (1 + x | ID)  #>    Data: dpoisson (Number of observations: 2000)  #>   Draws: 4 chains, each with iter = 1000; warmup = 0; thin = 1; #>          total post-warmup draws = 4000 #>  #> Group-Level Effects:  #> ~ID (Number of levels: 100)  #>                  Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS #> sd(Intercept)        1.18      0.15     0.91     1.52 1.00      959     1314 #> sd(x)                0.36      0.20     0.03     0.75 1.02      236      607 #> cor(Intercept,x)    -0.05      0.41    -0.76     0.84 1.00     1241     1125 #>  #> Population-Level Effects:  #>           Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS #> Intercept    -2.48      0.18    -2.85    -2.16 1.00     1163     1711 #> x             0.97      0.15     0.67     1.27 1.00     2704     2632 #>  #> Family Specific Parameters:  #>       Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS #> shape    61.33     60.34     8.53   232.25 1.00     4555     3481 #>  #> Draws were sampled using sample(hmc). For each parameter, Bulk_ESS #> and Tail_ESS are effective sample size measures, and Rhat is the potential #> scale reduction factor on split chains (at convergence, Rhat = 1)."},{"path":"https://joshuawiley.com/brmsmargins/articles/mixed-effects-marginaleffects.html","id":"ames-2","dir":"Articles","previous_headings":"Mixed Effects Negative Binomial Regression","what":"AMEs","title":"Marginal Effects for Mixed Effects Models","text":"use brmsmargins() way mixed effects poisson regression. example numeric derivative treating x continuous. example treating x discrete.","code":"h <- .001 ame1.nb <- brmsmargins(   mnb,   add = data.frame(x = c(0, h)),   contrasts = cbind(\"AME x\" = c(-1 / h, 1 / h)),   effects = \"integrateoutRE\", k = 100L, seed = 1234)  knitr::kable(ame1.nb$ContrastSummary, digits = 3) ame2.nb <- brmsmargins(   mnb,   at = data.frame(x = c(0, 1)),   contrasts = cbind(\"AME x\" = c(-1, 1)),   effects = \"integrateoutRE\", k = 100L, seed = 1234)  knitr::kable(ame2.nb$ContrastSummary, digits = 3)"},{"path":"https://joshuawiley.com/brmsmargins/articles/mixed-effects-marginaleffects.html","id":"marginal-coefficients-2","dir":"Articles","previous_headings":"Mixed Effects Negative Binomial Regression","what":"Marginal Coefficients","title":"Marginal Effects for Mixed Effects Models","text":"Negative binomial models fit glm() function R just show population averaged values brms. View results.","code":"## calculate marginal coefficients mc.nb <- marginalcoef(mnb, CI = 0.95) knitr::kable(   mc.nb$Summary[, .(     MargCoef = sprintf(\"%0.3f\", round(M, 3)),     MargCoefCI = sprintf(\"[%0.3f, %0.3f]\", round(LL, 3), round(UL, 3)))])"},{"path":"https://joshuawiley.com/brmsmargins/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Joshua F. Wiley. Author, maintainer. Donald Hedeker. Author.","code":""},{"path":"https://joshuawiley.com/brmsmargins/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Wiley J, Hedeker D (2022). brmsmargins: Bayesian Marginal Effects 'brms' Models. https://joshuawiley.com/brmsmargins/, https://github.com/JWiley/brmsmargins.","code":"@Manual{,   title = {brmsmargins: Bayesian Marginal Effects for 'brms' Models},   author = {Joshua F. Wiley and Donald Hedeker},   year = {2022},   note = {https://joshuawiley.com/brmsmargins/, https://github.com/JWiley/brmsmargins}, }"},{"path":"https://joshuawiley.com/brmsmargins/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"brmsmargins - Bayesian marginal effects","text":"package functions calculate marginal effects brms models ( http://paul-buerkner.github.io/brms/ ). central motivator calculate average marginal effects (AMEs) continuous discrete predictors fixed effects mixed effects regression models including location scale models. table shows overview currently supported models / features “X” indicates specific model / feature currently supported. column ‘Fixed’ means fixed effects models. column ‘Mixed’ means mixed effects models. general, distribution supported brms generates one one predicted value (e.g., multinomial logistic regression models) supported fixed effects models. Also note currently, Gaussian random effects supported. limiting even Bernoulli, Poisson, etc. outcomes, random effects commonly assumed Gaussian distribution. quick syntax overview use main function, brmsmargins().","code":""},{"path":"https://joshuawiley.com/brmsmargins/index.html","id":"fixed-effects-continuous-predictor","dir":"","previous_headings":"Overview","what":"Fixed effects, continuous predictor.","title":"brmsmargins - Bayesian marginal effects","text":"","code":"h <- .001 ames <- brmsmargins(   object = model,   add = data.frame(x = c(0, h)),   contrasts = cbind(\"AME x\" = c(-1 / h, 1 / h)),   effects = \"fixedonly\")    ames$ContrastSummary"},{"path":"https://joshuawiley.com/brmsmargins/index.html","id":"fixed-effects-discrete-predictor","dir":"","previous_headings":"Overview","what":"Fixed effects, discrete predictor.","title":"brmsmargins - Bayesian marginal effects","text":"","code":"ames <- brmsmargins(   object = model,   add = data.frame(x = c(0, 1)),   contrasts = cbind(\"AME x\" = c(-1, 1)),   effects = \"fixedonly\")  ames$Summary ames$ContrastSummary"},{"path":"https://joshuawiley.com/brmsmargins/index.html","id":"mixed-effects-continuous-predictor","dir":"","previous_headings":"Overview","what":"Mixed effects, continuous predictor.","title":"brmsmargins - Bayesian marginal effects","text":"","code":"h <- .001 ames <- brmsmargins(   object = model,   add = data.frame(x = c(0, h)),   contrasts = cbind(\"AME x\" = c(-1 / h, 1 / h)),   effects = \"integrateoutRE\")    ames$ContrastSummary"},{"path":"https://joshuawiley.com/brmsmargins/index.html","id":"mixed-effects-discrete-predictor","dir":"","previous_headings":"Overview","what":"Mixed effects, discrete predictor.","title":"brmsmargins - Bayesian marginal effects","text":"","code":"ames <- brmsmargins(   object = model,   add = data.frame(x = c(0, 1)),   contrasts = cbind(\"AME x\" = c(-1, 1)),   effects = \"integrateoutRE\")  ames$Summary ames$ContrastSummary"},{"path":"https://joshuawiley.com/brmsmargins/index.html","id":"mixed-effects-location-scale-continuous-predictor","dir":"","previous_headings":"Overview","what":"Mixed Effects Location Scale, continuous predictor","title":"brmsmargins - Bayesian marginal effects","text":"","code":"h <- .001 ames <- brmsmargins(   object = model,   add = data.frame(x = c(0, h)),   contrasts = cbind(\"AME x\" = c(-1 / h, 1 / h)),   dpar = \"sigma\",   effects = \"integrateoutRE\")    ames$ContrastSummary"},{"path":"https://joshuawiley.com/brmsmargins/index.html","id":"mixed-effects-location-scale-discrete-predictor","dir":"","previous_headings":"Overview","what":"Mixed Effects Location Scale, discrete predictor","title":"brmsmargins - Bayesian marginal effects","text":"Note even mixed effects models, possible generate predictions marginal effects fixed effects , just specifying effects = \"fixedonly\" probably good idea generally shown default. Also note examples ames$Summary summary averaged predicted values. often useful discrete predictors. continuous predictors, focus marginal effects, often interesting. However, argument can used continuous predictors generate interesting averaged predicted values. example, get predicted values integrating random effects range ages averaging (marginalizing) predictors / covariates.","code":"ames <- brmsmargins(   object = model,   at = data.frame(x = c(0, 1)),   contrasts = cbind(\"AME x\" = c(-1, 1)),   dpar = \"sigma\",   effects = \"integrateoutRE\")  ames$Summary ames$ContrastSummary ames <- brmsmargins(   object = model,   at = data.frame(age = c(20, 30, 40, 50, 60)),   effects = \"integrateoutRE\")  ames$Summary"},{"path":"https://joshuawiley.com/brmsmargins/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"brmsmargins - Bayesian marginal effects","text":"package yet CRAN, install, must use development version. install, run:","code":"remotes::install_github(\"JWiley/brmsmargins\")"},{"path":"https://joshuawiley.com/brmsmargins/index.html","id":"learn-more","dir":"","previous_headings":"","what":"Learn More","title":"brmsmargins - Bayesian marginal effects","text":"three vignettes introduce use package several scenarios. Fixed effects models (also called single level models). also best place start learning use package. includes brief amount motivation want calculate marginal effects . Mixed effects models (also called multilevel models). shows calculate marginal effects mixed effects / multilevel models. runnable examples, much background. Location scale models. Location scale models models location (e.g., mean) scale (e.g., variance / residual standard deviation) explicitly modeled outcomes. require use distributional parameters dpar brms. vignette shows calculate marginal effects location scale models scale part.","code":""},{"path":"https://joshuawiley.com/brmsmargins/reference/assertall.html","id":null,"dir":"Reference","previous_headings":"","what":"Check Assertions about a brmsfit Model Object — assertall","title":"Check Assertions about a brmsfit Model Object — assertall","text":"set internal utility functions. intended general use. Instead, intended called circumstances expected result TRUE. designed try give informative error messages assertion met. result stop() error assertion met.","code":""},{"path":"https://joshuawiley.com/brmsmargins/reference/assertall.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check Assertions about a brmsfit Model Object — assertall","text":"","code":".assertbrmsfit(object)  .assertgaussian(object)  .assertfamily(object)  .assertdpar(object, dpar)  .assertlink(object, dpar)"},{"path":"https://joshuawiley.com/brmsmargins/reference/assertall.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check Assertions about a brmsfit Model Object — assertall","text":"object brmsfit model object evaluated. dpar Required .assertdpar checks valid. Optional .assertlink use NULL specified. specified, NULL character string.","code":""},{"path":"https://joshuawiley.com/brmsmargins/reference/assertall.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check Assertions about a brmsfit Model Object — assertall","text":"invisible, logical TRUE assertion met. (informative) error message assertion met.","code":""},{"path":"https://joshuawiley.com/brmsmargins/reference/assertall.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Check Assertions about a brmsfit Model Object — assertall","text":".assertbrmsfitasserts object class brmsfit. .assertgaussianasserts random effects Gaussian. .assertfamilyasserts distribution (family) outcome currently supported family. applies integrating random effects. .assertlinkasserts link function currently supported link function. applies integrating random effects.","code":""},{"path":"https://joshuawiley.com/brmsmargins/reference/brmsmargins.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Marginal Effects from 'brms' Models — brmsmargins","title":"Calculate Marginal Effects from 'brms' Models — brmsmargins","text":"function designed help calculate marginal effects including average marginal effects (AMEs) brms models.","code":""},{"path":"https://joshuawiley.com/brmsmargins/reference/brmsmargins.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Marginal Effects from 'brms' Models — brmsmargins","text":"","code":"brmsmargins(   object,   at = NULL,   add = NULL,   newdata = model.frame(object),   CI = 0.99,   CIType = \"HDI\",   contrasts = NULL,   ROPE = NULL,   MID = NULL,   subset = NULL,   dpar = NULL,   seed,   ... )"},{"path":"https://joshuawiley.com/brmsmargins/reference/brmsmargins.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Marginal Effects from 'brms' Models — brmsmargins","text":"object fitted brms model object. Required. optional object inheriting data frame indicating values hold specific variables calculating average predictions. intended AMEs categorical variables. Currently one add can specified. add optional object inheriting data frame indicating values add specific variables calculating average predictions. intended AMEs continuous variables. Currently one add can specified. newdata object inheriting data frame indicating baseline values use predictions AMEs. Defaults model frame. CI numeric value specifying width credible interval. Defaults 0.99. CIType character string specifying type credible interval (e.g., highest density interval). passed bsummary turn passes ci. Defaults “HDI”. contrasts optional contrast matrix. posterior predictions matrix post multiplied contrast matrix, must conformable. posterior predictions matrix separate column row add object, contrast matrix number rows. can multiple columns, desire multiple specific contrasts. ROPE Either left NULL, default, numeric vector length 2, specifying lower upper thresholds Region Practical Equivalence (ROPE). MID Either left NULL, default, numeric vector length 2, specifying lower upper thresholds Minimally Important Difference (MID). Unlike ROPE, percentages MID calculated exceeding bounds specified argument, whereas ROPE percentage posterior inside bounds specified. subset character string valid R expression used subset dataset passed newdata, prior analysis. Defaults NULL. dpar Parameter passed dpar argument fitted() brms. Defaults NULL indicating mean location parameter typically. seed Argument controls whether () random seed use. matter using fixed effects . However, using Monte Carlo integration integrate random effects mixed effects models, critical looking continuous marginal effect small offset value otherwise Monte Carlo error one set predictions another may exceed true predicted difference. seed left missing, default, single, random integer +\\- 1e7 chosen used set seed prediction. manually chosen (recommended reproducibility), seed either single value, case single value used set seed prediction. Alternately, can vector seeds either length number rows add, whichever specified. probably generally want, means even input data, get slightly different predictions (integrating random effects) due Monte Carlo variation. Finally, rather missing, can explicitly set seed = NULL, want seed set. fine, instance, using fixed effects, know intend behavior integrating random effects. ... Additional arguments passed prediction. particular, effects argument prediction() important mixed effects models control random effects treated predictions, subsequently changes marginal effect estimates.","code":""},{"path":"https://joshuawiley.com/brmsmargins/reference/brmsmargins.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Marginal Effects from 'brms' Models — brmsmargins","text":"list four elements. PosteriorPosterior distribution predictions. predictions default fixed effects , specifying options prediction() can include random effects predictions integrating random effects. SummaryA summary predictions. ContrastsPosterior distribution contrasts, contrast matrix specified. ContrastSummaryA summary posterior distribution contrasts, specified","code":""},{"path":"https://joshuawiley.com/brmsmargins/reference/brmsmargins.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate Marginal Effects from 'brms' Models — brmsmargins","text":"main parts required function fitted model object, (via object argument) dataset used prediction, (via newdata argument defaults model frame), dataset passed either add. steps follows: Check function inputs (model object, data, etc.) valid. Take dataset newdata argument either add values first row add replace values using first row . variables specified add modified. variables left . Use fitted() function generate predictions based modified dataset. effects set “fixedonly” (meaning generate predictions using fixed effects) “includeRE” (meaning generate predictions using fixed random effects), predictions generated entirely using fitted() function , typically back transformed response scale. mixed effects models fixed random effects effects set “integrateoutRE”, fitted() used generate predictions using fixed effects linear scale. prediction generated, random effects integrated drawing k random samples model assumed random effect(s) distribution. added fixed effects predictions, back transformed, averaged k random samples perform numerical Monte Carlo integration. predictions posterior draw, back transformation applied, averaged, resulting one, marginal value posterior draw. marginal predictions. average marginal predictions averaging sample dataset, may marginal predictions means, initial input dataset used mean values, etc. Steps two four repeated row add. Results combined matrix columns different rows add rows different posterior draws. contrasts specified, using contrast matrix, marginal prediction matrix post multiplied contrast matrix. Depending choice(s) add values contrast matrix, can average marginal effects (AMEs) using numerical integration (add 0 close 0 value) discrete difference (say 0 1 values) given predictor(s). marginal predictions contrasts, specified summarized. Although brmsmargins() focused helping calculate marginal effects, can also used generate marginal predictions, indeed marginal predictions foundation marginal effect estimates. manipulating input data, add contrast matrix, types estimates averaged weighting results specific ways also possible.","code":""},{"path":"https://joshuawiley.com/brmsmargins/reference/brmsmargins.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Calculate Marginal Effects from 'brms' Models — brmsmargins","text":"Pavlou, M., Ambler, G., Seaman, S., & Omar, R. Z. (2015) doi: 10.1186/s12874-015-0046-6  “note obtaining correct marginal predictions random intercepts model binary outcomes” Skrondal, ., & Rabe-Hesketh, S. (2009) doi: 10.1111/j.1467-985X.2009.00587.x  “Prediction multilevel generalized linear models” Norton EC, Dowd , Maciejewski ML. (2019) doi: 10.1001/jama.2019.1954  “Marginal Effects—Quantifying Effect Changes Risk Factors Logistic Regression Models”","code":""},{"path":"https://joshuawiley.com/brmsmargins/reference/brmsmargins.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Marginal Effects from 'brms' Models — brmsmargins","text":"","code":"if (FALSE) { #### Testing #### ## sample data and logistic model with brms set.seed(1234) Tx <- rep(0:1, each = 50) ybin <- c(rep(0:1, c(40,10)), rep(0:1, c(10,40))) logitd <- data.frame(Tx = Tx, ybin = ybin) logitd$x <- rnorm(100, mean = logitd$ybin, sd = 2)  mbin <- brms::brm(ybin ~ Tx + x, data = logitd, family = brms::bernoulli())  summary(mbin)  ## now check AME for Tx tmp <- brmsmargins(   object = mbin,   at = data.table::data.table(Tx = 0:1),   contrasts = matrix(c(-1, 1), nrow = 2),   ROPE = c(-.05, +.05),   MID = c(-.10, +.10))  tmp$Summary tmp$ContrastSummary ## Tx AME   ## now check AME for Tx with bootstrapping the AME population tmpalt <- brmsmargins(   object = mbin,   at = data.table::data.table(Tx = 0:1),   contrasts = matrix(c(-1, 1), nrow = 2),   ROPE = c(-.05, +.05),   MID = c(-.10, +.10),   resample = 100L)  tmpalt$Summary tmpalt$ContrastSummary ## Tx AME  ## now check AME for continuous predictor, x ## use .01 as an approximation for first derivative ## 1 / .01 in the contrast matrix to get back to a one unit change metric tmp2 <- brmsmargins(   object = mbin,   add = data.table::data.table(x = c(0, .01)),   contrasts = matrix(c(-1/.01, 1/.01), nrow = 2),   ROPE = c(-.05, +.05),   MID = c(-.10, +.10))  tmp2$ContrastSummary ## x AME  if (FALSE) {   library(lme4)   data(sleepstudy)   fit <- brms::brm(Reaction ~ 1 + Days + (1+ Days | Subject),              data = sleepstudy,              cores = 4)    summary(fit, prob = 0.99)    tmp <- brmsmargins(     object = fit,     at = data.table::data.table(Days = 0:1),     contrasts = matrix(c(-1, 1), nrow = 2),     ROPE = c(-.05, +.05),     MID = c(-.10, +.10), CIType = \"ETI\", effects = \"integrateoutRE\", k = 5L)    tmp$Summary   tmp$ContrastSummary   } }"},{"path":"https://joshuawiley.com/brmsmargins/reference/bsummary.html","id":null,"dir":"Reference","previous_headings":"","what":"Personal Preference Based Bayesian Summary — bsummary","title":"Personal Preference Based Bayesian Summary — bsummary","text":"Returns summary posterior distribution single parameter / value. based personal preference. Notably, use bayestestR::describe_posterior, excellent function, desire also describe percentage full posterior distribution exceeding value Minimally Important Difference (MID). MIDs used clinical studies outcome measures pre-defined differences considered clinically important, distinct ROPE general credible intervals capturing uncertainty.","code":""},{"path":"https://joshuawiley.com/brmsmargins/reference/bsummary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Personal Preference Based Bayesian Summary — bsummary","text":"","code":"bsummary(x, CI = 0.99, CIType = \"HDI\", ROPE = NULL, MID = NULL)"},{"path":"https://joshuawiley.com/brmsmargins/reference/bsummary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Personal Preference Based Bayesian Summary — bsummary","text":"x posterior distribution parameter CI numeric value indicating desired width credible interval. Defaults 0.99 currently, subject change. 99% interval chosen default recent arguments made realm meta science , essentially, many false positives many “findings” science able replicated. case, users ideally specify desired CI width, rely defaults. CIType character string indicating type credible interval, passed ci function method CIs. ROPE Either left NULL, default, numeric vector length 2, specifying lower upper thresholds Region Practical Equivalence (ROPE). MID Either left NULL, default, numeric vector length 2, specifying lower upper thresholds Minimally Important Difference (MID). Unlike ROPE, percentages MID calculated exceeding bounds specified argument, whereas ROPE percentage posterior inside bounds specified.","code":""},{"path":"https://joshuawiley.com/brmsmargins/reference/bsummary.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Personal Preference Based Bayesian Summary — bsummary","text":"data.table mean, M M mean posterior samples Mdn median posterior samples LL lower limit credible interval UL upper limit credible interval PercentROPE percentage posterior samples falling ROPE PercentMID percentage posterior samples falling beyond MID CI width credible interval used CIType type credible interval used (e.g., highest density interval) ROPE label describing values included ROPE MID label describing values included MID","code":""},{"path":"https://joshuawiley.com/brmsmargins/reference/bsummary.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Personal Preference Based Bayesian Summary — bsummary","text":"Kruschke, J. K. (2018). doi: 10.1177/2515245918771304  “Rejecting accepting parameter values Bayesian estimation”","code":""},{"path":"https://joshuawiley.com/brmsmargins/reference/bsummary.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Personal Preference Based Bayesian Summary — bsummary","text":"","code":"bsummary(rnorm(1000)) #>            M       Mdn        LL       UL PercentROPE PercentMID   CI CIType #> 1: 0.0142469 0.0368113 -2.593353 2.417657          NA         NA 0.99    HDI #>    ROPE  MID #> 1: <NA> <NA>  bsummary(rnorm(1000), ROPE = c(-.5, .5), MID = c(-1, 1)) #>              M         Mdn        LL       UL PercentROPE PercentMID   CI #> 1: -0.03027949 -0.02021227 -2.294728 2.766709        36.9       33.1 0.99 #>    CIType        ROPE                   MID #> 1:    HDI [-0.5, 0.5] [-Inf, -1] | [1, Inf]"},{"path":"https://joshuawiley.com/brmsmargins/reference/builders.html","id":null,"dir":"Reference","previous_headings":"","what":"Build the Variable Names or Data Objects for Estimation — builders","title":"Build the Variable Names or Data Objects for Estimation — builders","text":"set internal utility functions. intended general use.","code":""},{"path":"https://joshuawiley.com/brmsmargins/reference/builders.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Build the Variable Names or Data Objects for Estimation — builders","text":"","code":".namesL(block, number)  .buildL(data, block, number, dpar)  .namesSD(ranef, block, dpar)  .buildSD(data, ranef, block, dpar)  .namesZ(block, number, dpar)  .buildZ(data, block, number, dpar)"},{"path":"https://joshuawiley.com/brmsmargins/reference/builders.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Build the Variable Names or Data Objects for Estimation — builders","text":"block random effect block use. integer. number number elements random effect block. integer. data data object. example result make_standata() .buildZ(), list, dataset posterior draws as_draws_df() .buildL() .buildSD(). dpar dpar use. apply L matrix. ranef data set information model object random effects. used .namesSD .buildSD.","code":""},{"path":"https://joshuawiley.com/brmsmargins/reference/builders.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Build the Variable Names or Data Objects for Estimation — builders","text":"character vector .names functions matrix .build functions.","code":""},{"path":"https://joshuawiley.com/brmsmargins/reference/builders.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Build the Variable Names or Data Objects for Estimation — builders","text":".namesLGenerate names L matrix brms. Create variable names Cholesky decomposition random effects correlation matrix brms. Note brms returns lower triangular matrix want upper triangular matrix, names transposed. results can passed tab2mat function convert row vector matrix. .buildLReturns L matrix object. Rows posterior draws. .namesSDCreate names random effect standard deviation estimates. .buildSDReturn matrix random effect standard deviation estimates. Rows posterior draws. .namesZCreate names random effects data predictions. .buildZReturn matrix data random effect predictions.","code":""},{"path":"https://joshuawiley.com/brmsmargins/reference/dot-averagePosterior.html","id":null,"dir":"Reference","previous_headings":"","what":"Average Over Posterior Predictions — .averagePosterior","title":"Average Over Posterior Predictions — .averagePosterior","text":"Internal function averages posterior predictions using either rowMeans() rowBootMeans(), latter useful incorporate uncertainty inputs used generate predictions.","code":""},{"path":"https://joshuawiley.com/brmsmargins/reference/dot-averagePosterior.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Average Over Posterior Predictions — .averagePosterior","text":"","code":".averagePosterior(posterior, resample = 0L, seed = FALSE)"},{"path":"https://joshuawiley.com/brmsmargins/reference/dot-averagePosterior.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Average Over Posterior Predictions — .averagePosterior","text":"posterior posterior matrix type object. assumed different predictions averaged different columns. Different posterior draws different rows. resample integer indicating number bootstrap resamples posterior predictions use calculating summaries. Defaults 0L. See details section informations implementation experimental may operate one expect. seed seed random number generation. Defaults FALSE, means seed set. used resample positive, non-zero integer.","code":""},{"path":"https://joshuawiley.com/brmsmargins/reference/dot-averagePosterior.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Average Over Posterior Predictions — .averagePosterior","text":"vector averaged posterior.","code":""},{"path":"https://joshuawiley.com/brmsmargins/reference/dot-checktab.html","id":null,"dir":"Reference","previous_headings":"","what":"Check Object Class is a Table — .checktab","title":"Check Object Class is a Table — .checktab","text":"Internal utility function confirm object attributes needed used data. Currently tbl, data.frame, data.table.","code":""},{"path":"https://joshuawiley.com/brmsmargins/reference/dot-checktab.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check Object Class is a Table — .checktab","text":"","code":".checktab(x, requireNames = TRUE)"},{"path":"https://joshuawiley.com/brmsmargins/reference/dot-checktab.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check Object Class is a Table — .checktab","text":"x object evaluated. requireNames logical, whether names required. Defaults TRUE","code":""},{"path":"https://joshuawiley.com/brmsmargins/reference/dot-checktab.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check Object Class is a Table — .checktab","text":"empty string issues. Otherwise, non zero string warning/error messages.","code":""},{"path":"https://joshuawiley.com/brmsmargins/reference/dot-extractlink.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract the Link from a brms Model — .extractlink","title":"Extract the Link from a brms Model — .extractlink","text":"Internal utility function take brmsfit object extract link specific dpar.","code":""},{"path":"https://joshuawiley.com/brmsmargins/reference/dot-extractlink.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract the Link from a brms Model — .extractlink","text":"","code":".extractlink(object, dpar)"},{"path":"https://joshuawiley.com/brmsmargins/reference/dot-extractlink.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract the Link from a brms Model — .extractlink","text":"object brmsfit class model object. dpar dpar link extracted.","code":""},{"path":"https://joshuawiley.com/brmsmargins/reference/dot-extractlink.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract the Link from a brms Model — .extractlink","text":"character string, link.","code":""},{"path":"https://joshuawiley.com/brmsmargins/reference/dot-links.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a Link Function Name to a List — .links","title":"Convert a Link Function Name to a List — .links","text":"Internal utility function used prediction(). Takes link function name character string, type effect used, desired back transformation returns list options needed execute desired options prediction().","code":""},{"path":"https://joshuawiley.com/brmsmargins/reference/dot-links.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a Link Function Name to a List — .links","text":"","code":".links(   link,   effects = c(\"fixedonly\", \"includeRE\", \"integrateoutRE\"),   backtrans = c(\"response\", \"linear\", \"identity\", \"invlogit\", \"exp\", \"square\",     \"inverse\") )"},{"path":"https://joshuawiley.com/brmsmargins/reference/dot-links.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a Link Function Name to a List — .links","text":"link link named brmsfit object effects character string, type effect desired backtrans character string, type back transformation","code":""},{"path":"https://joshuawiley.com/brmsmargins/reference/dot-links.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert a Link Function Name to a List — .links","text":"list eight elements. scale character string giving argument passed fitted(). ilink character string giving name inverse link function. ifun Inverse link function R function. ilinknum integer giving inverse link / transformation applied integratere(), needed C++ function use R based inverse link function.","code":""},{"path":"https://joshuawiley.com/brmsmargins/reference/dot-percent.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Percent of Observations Within or Without a Window — .percent","title":"Calculate Percent of Observations Within or Without a Window — .percent","text":"internal helper function calculate label percentage posterior distribution falls within Region Practical Equivalence (ROPE) beyond Minimally Important Difference (MID). designed fail gracefully window given, give useful labels windows / range used. Intended use internally part brmsmargins.","code":""},{"path":"https://joshuawiley.com/brmsmargins/reference/dot-percent.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Percent of Observations Within or Without a Window — .percent","text":"","code":".percent(x, window = NULL, within = TRUE)"},{"path":"https://joshuawiley.com/brmsmargins/reference/dot-percent.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Percent of Observations Within or Without a Window — .percent","text":"x vector values evaluate. Required. window optional numeric vector giving window. within logical value indicating whether calculate percentage within window (TRUE) percentage outside window (FALSE). Defaults TRUE.","code":""},{"path":"https://joshuawiley.com/brmsmargins/reference/dot-percent.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Percent of Observations Within or Without a Window — .percent","text":"list Window, specified else NULL, Percent observations, Label specifying exact window used human readable format.","code":""},{"path":"https://joshuawiley.com/brmsmargins/reference/integratemvn.html","id":null,"dir":"Reference","previous_headings":"","what":"Integrate over Multivariate Normal Random Effects — integratemvn","title":"Integrate over Multivariate Normal Random Effects — integratemvn","text":"Used process Monte Carlo integration multivariate normal random effects. generates random draws multivariate normal distribution multiplies data. intended called directly users.","code":""},{"path":"https://joshuawiley.com/brmsmargins/reference/integratemvn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Integrate over Multivariate Normal Random Effects — integratemvn","text":"","code":"integratemvn(X, k, sd, chol)  integratemvnR(X, k, sd, chol)"},{"path":"https://joshuawiley.com/brmsmargins/reference/integratemvn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Integrate over Multivariate Normal Random Effects — integratemvn","text":"X numeric matrix data multiplied random effects k integer, number random samples used numerical integration sd numeric vector standard deviations chol numeric matrix, Cholesky decomposition correlation matrix multivariate normal distribution.","code":""},{"path":"https://joshuawiley.com/brmsmargins/reference/integratemvn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Integrate over Multivariate Normal Random Effects — integratemvn","text":"numeric matrix random values","code":""},{"path":"https://joshuawiley.com/brmsmargins/reference/integratemvn.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Integrate over Multivariate Normal Random Effects — integratemvn","text":"integratemvnR: Pure R implementation integratemvn","code":""},{"path":"https://joshuawiley.com/brmsmargins/reference/integratemvn.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Integrate over Multivariate Normal Random Effects — integratemvn","text":"","code":"integratemvn(   X = matrix(1, 1, 2),   k = 100L,   sd = c(10, 5),   chol = chol(matrix(c(1, .5, .5, 1), 2))) #>          [,1]     [,2]      [,3]      [,4]     [,5]    [,6]    [,7]      [,8] #> [1,] 15.96407 3.697453 -5.787416 -1.038202 5.677732 22.6584 34.8807 -5.158601 #>           [,9]    [,10]     [,11]  [,12]     [,13]   [,14]    [,15]    [,16] #> [1,] -1.730056 -6.82924 0.7682875 1.0809 -1.466285 3.83729 -12.2655 -4.81934 #>         [,17]     [,18]     [,19]      [,20]    [,21]   [,22]    [,23] #> [1,] 2.622192 -13.49632 -10.45845 -0.8431214 14.18248 3.12659 16.74433 #>          [,24]     [,25]    [,26]    [,27]     [,28]    [,29]     [,30] #> [1,] -12.26993 -10.46241 5.556433 13.20028 -23.16127 19.29022 -2.437254 #>         [,31]     [,32]    [,33]     [,34]    [,35]    [,36]    [,37]     [,38] #> [1,] 2.349469 -4.950817 9.238059 -13.96725 11.17813 6.324754 11.16032 -9.719005 #>         [,39]     [,40]   [,41]     [,42]    [,43]     [,44]    [,45]    [,46] #> [1,] 15.13065 -11.40887 7.89041 -10.03981 29.78614 -6.604055 5.984812 -4.88917 #>         [,47]    [,48]     [,49]    [,50]    [,51]     [,52]     [,53] #> [1,] 18.22807 -7.93469 -17.18644 9.343171 14.53339 -32.32413 -6.641885 #>          [,54]    [,55]    [,56]    [,57]     [,58]     [,59]    [,60]    [,61] #> [1,] -5.155906 10.34266 10.29898 17.58425 -16.93309 -37.43566 23.81251 11.41055 #>         [,62]     [,63]    [,64]    [,65]     [,66]    [,67]     [,68]    [,69] #> [1,] -1.62564 -10.25196 3.262215 -18.2821 -16.88518 34.00932 -16.96225 12.77671 #>          [,70]   [,71]     [,72]    [,73]     [,74]    [,75]      [,76] #> [1,] -11.04622 8.62076 -3.121284 8.678759 -5.439402 24.24851 -0.4941583 #>         [,77]    [,78]    [,79]     [,80]     [,81]   [,82]     [,83]    [,84] #> [1,] 11.30279 47.14141 -9.61626 -7.119637 -21.59179 15.3403 -12.08248 2.320246 #>          [,85]    [,86]     [,87]     [,88]     [,89]     [,90]   [,91] #> [1,] -27.68107 10.69548 -9.324865 -26.05894 -3.028472 -32.46837 13.8323 #>          [,92]    [,93]    [,94]    [,95]    [,96]     [,97]     [,98] #> [1,] -4.786407 6.402194 19.78766 11.08289 -31.8653 -3.995243 -7.594224 #>          [,99]    [,100] #> [1,] -3.749126 -7.114948  integratemvn(matrix(1, 1, 1), 100L, c(5), matrix(1)) #>          [,1]      [,2]     [,3]      [,4]      [,5]      [,6]       [,7] #> [1,] 1.281039 -2.503194 2.311048 -3.111448 -2.600153 -2.300815 -0.9977541 #>           [,8]       [,9]     [,10]      [,11]     [,12]    [,13]     [,14] #> [1,] -7.870522 -0.6158656 -1.485471 -0.2624668 -3.291431 1.451101 -3.779618 #>         [,15]     [,16]     [,17]     [,18]     [,19]     [,20]      [,21] #> [1,] 1.295834 -5.546061 0.3419095 -1.209847 -4.661816 -7.641606 -0.7204566 #>         [,22]    [,23]     [,24]    [,25]    [,26]   [,27]     [,28]     [,29] #> [1,] 2.859512 10.92006 -6.590292 2.580041 3.685918 1.60497 -1.328533 -1.888863 #>           [,30]     [,31]     [,32]     [,33]    [,34]    [,35]     [,36] #> [1,] -0.3533379 -3.166125 -1.767054 -10.37334 1.178031 -2.66025 -5.591676 #>          [,37]     [,38]     [,39]    [,40]    [,41]     [,42]    [,43] #> [1,] -3.145819 -2.912923 -6.189365 1.845403 3.264095 -6.313027 0.157712 #>         [,44]    [,45]     [,46]     [,47]    [,48]     [,49]      [,50] #> [1,] 6.582468 3.059635 -3.373541 -2.242055 -6.91427 -3.630519 -0.6476225 #>          [,51]     [,52]    [,53]    [,54]     [,55]     [,56]      [,57] #> [1,] -6.850453 -4.557692 -3.09926 3.522525 -4.408483 -1.823003 -0.2165157 #>          [,58]     [,59]      [,60]    [,61]     [,62]    [,63]    [,64] #> [1,] 0.9295465 0.7523613 -0.8134869 9.021929 -3.044772 8.135727 12.76018 #>          [,65]     [,66]    [,67]     [,68]    [,69]    [,70]     [,71] #> [1,] -3.035283 0.6465616 2.376288 -11.93268 6.867514 3.397275 -2.064303 #>          [,72]    [,73]     [,74]    [,75]     [,76]     [,77]    [,78] #> [1,] -1.003829 5.897365 -1.388342 3.032834 -9.046708 0.6909606 2.979953 #>         [,79]     [,80]    [,81]     [,82]     [,83]     [,84]     [,85] #> [1,] 3.844638 -4.634065 5.453633 -3.630856 -4.224225 -1.276378 -1.682754 #>         [,86]    [,87]     [,88]      [,89]    [,90]     [,91]    [,92] #> [1,] 5.528434 1.604393 -7.956396 -0.7054742 1.430454 -3.288515 8.612637 #>         [,93]     [,94]    [,95]    [,96]    [,97]    [,98]      [,99]   [,100] #> [1,] 1.527094 -2.610218 8.179336 4.729734 9.906319 1.110219 -0.9457816 2.792575"},{"path":"https://joshuawiley.com/brmsmargins/reference/integratere.html","id":null,"dir":"Reference","previous_headings":"","what":"Integrate over Random Effects — integratere","title":"Integrate over Random Effects — integratere","text":"Used conduct Monte Carlo integration Gaussian random effects. intended called directly users.","code":""},{"path":"https://joshuawiley.com/brmsmargins/reference/integratere.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Integrate over Random Effects — integratere","text":"","code":"integratere(d, sd, L, k, yhat, backtrans)  integratereR(d, sd, L, k, yhat, backtrans)"},{"path":"https://joshuawiley.com/brmsmargins/reference/integratere.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Integrate over Random Effects — integratere","text":"d list model matrices random effect block. sd list standard deviation matrices random effect block rows different posterior draws. L list matrices random effect block containing parts L matrix, Cholesky decomposition random effect correlation matrix. k integer, number samples Monte Carlo integration. yhat matrix fixed effects predictions backtrans integer, indicating type back transformation. 0 indicates inverse logit (e.g., logistic regression). 1 indicates exponential (e.g., poisson negative binomial regression outcome natural log transformed). 2 indicates square (e.g., outcome square root transformed). 3 indicates inverse (e.g., outcome inverse transformed Gamma regression) integer results transformation. -9 recommended option transformation future transformations supported , positive integers.","code":""},{"path":"https://joshuawiley.com/brmsmargins/reference/integratere.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Integrate over Random Effects — integratere","text":"numeric matrix Monte Carlo integral calculated.","code":""},{"path":"https://joshuawiley.com/brmsmargins/reference/integratere.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Integrate over Random Effects — integratere","text":"integratereR: Pure R implementation integratere","code":""},{"path":"https://joshuawiley.com/brmsmargins/reference/integratere.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Integrate over Random Effects — integratere","text":"","code":"integratere(   d = list(matrix(1, 1, 1)),   sd = list(matrix(1, 2, 1)),   L = list(matrix(1, 2, 1)),   k = 10L,   yhat = matrix(0, 2, 1),   backtrans = 0L) #>           [,1] #> [1,] 0.4715828 #> [2,] 0.4988988"},{"path":"https://joshuawiley.com/brmsmargins/reference/is.random.html","id":null,"dir":"Reference","previous_headings":"","what":"Check a brmsfit Object has Random Effects — is.random","title":"Check a brmsfit Object has Random Effects — is.random","text":"Internal utility function check whether brmsfit object random effects .","code":""},{"path":"https://joshuawiley.com/brmsmargins/reference/is.random.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check a brmsfit Object has Random Effects — is.random","text":"","code":"is.random(object)"},{"path":"https://joshuawiley.com/brmsmargins/reference/is.random.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check a brmsfit Object has Random Effects — is.random","text":"object object evaluated.","code":""},{"path":"https://joshuawiley.com/brmsmargins/reference/is.random.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check a brmsfit Object has Random Effects — is.random","text":"TRUE random effects present. FALSE random effects present.","code":""},{"path":"https://joshuawiley.com/brmsmargins/reference/lmcpp.html","id":null,"dir":"Reference","previous_headings":"","what":"Fast Linear Regression — lmcpp","title":"Fast Linear Regression — lmcpp","text":"Used get marginal coefficients generalized linear mixed model.","code":""},{"path":"https://joshuawiley.com/brmsmargins/reference/lmcpp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fast Linear Regression — lmcpp","text":"","code":"lmcpp(X, y)"},{"path":"https://joshuawiley.com/brmsmargins/reference/lmcpp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fast Linear Regression — lmcpp","text":"X numeric model matrix. intercept desired, must already added column. y numeric matrix. single column one response variable multiple columns column different response, marginal coefficients column different MCMC sample.","code":""},{"path":"https://joshuawiley.com/brmsmargins/reference/lmcpp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fast Linear Regression — lmcpp","text":"numeric matrix coefficient.","code":""},{"path":"https://joshuawiley.com/brmsmargins/reference/lmcpp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fast Linear Regression — lmcpp","text":"","code":"lmcpp(cbind(1, mtcars$hp, mtcars$am), as.matrix(mtcars[, c(\"mpg\", \"qsec\")])) #>            [,1]        [,2] #> [1,] 26.5849137 21.57549953 #> [2,] -0.0588878 -0.02116732 #> [3,]  5.2770853 -1.53050633"},{"path":"https://joshuawiley.com/brmsmargins/reference/marginalcoef.html","id":null,"dir":"Reference","previous_headings":"","what":"Marginal Coefficients from a 'brms' Model — marginalcoef","title":"Marginal Coefficients from a 'brms' Model — marginalcoef","text":"Calculate marginal coefficients brms generalized linear mixed model using method proposed Hedeker (2018).","code":""},{"path":"https://joshuawiley.com/brmsmargins/reference/marginalcoef.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Marginal Coefficients from a 'brms' Model — marginalcoef","text":"","code":"marginalcoef(   object,   summarize = TRUE,   posterior = FALSE,   index,   backtrans = c(\"response\", \"linear\", \"identity\", \"invlogit\", \"exp\", \"square\",     \"inverse\"),   k = 100L,   ... )"},{"path":"https://joshuawiley.com/brmsmargins/reference/marginalcoef.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Marginal Coefficients from a 'brms' Model — marginalcoef","text":"object fitted brms model object includes random effects. Required. summarize logical value, whether calculate summaries posterior predictions. Defaults TRUE. posterior logical value whether save return posterior samples. Defaults FALSE assumption typical use case return summaries . index optional integer vector, giving posterior draws used calculations. omitted, defaults posterior draws. backtrans character string indicating type back transformation applied. Can one “response” meaning use response scale, “linear” “identity” meaning use linear predictor scale, specific back transformation desired, possible list “invlogit”, “exp”, “square”, “inverse”. Custom back transformations needed , example, outcome variable transformed prior fitting model. k integer providing number random draws use integrating random effects. relevant effects “integrateoutRE”. ... Additional arguments passed fitted()","code":""},{"path":"https://joshuawiley.com/brmsmargins/reference/marginalcoef.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Marginal Coefficients from a 'brms' Model — marginalcoef","text":"list Summary Posterior. may NULL depending arguments used.","code":""},{"path":"https://joshuawiley.com/brmsmargins/reference/marginalcoef.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Marginal Coefficients from a 'brms' Model — marginalcoef","text":"Hedeker, D., du Toit, S. H., Demirtas, H. & Gibbons, R. D. (2018) doi: 10.1111/biom.12707  “note marginalization regression parameters mixed models binary outcomes”","code":""},{"path":"https://joshuawiley.com/brmsmargins/reference/prediction.html","id":null,"dir":"Reference","previous_headings":"","what":"Marginal Posterior Predictions from a 'brms' Model — prediction","title":"Marginal Posterior Predictions from a 'brms' Model — prediction","text":"Calculate marginal predictions brms model. Marginal predictions average input data posterior draw. Marginal predictions models random effects integrate random effects.","code":""},{"path":"https://joshuawiley.com/brmsmargins/reference/prediction.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Marginal Posterior Predictions from a 'brms' Model — prediction","text":"","code":"prediction(   object,   data,   summarize = TRUE,   posterior = FALSE,   index,   dpar = NULL,   resample = 0L,   resampleseed = FALSE,   effects = c(\"fixedonly\", \"includeRE\", \"integrateoutRE\"),   backtrans = c(\"response\", \"linear\", \"identity\", \"invlogit\", \"exp\", \"square\",     \"inverse\"),   k = 100L,   raw = FALSE,   ... )"},{"path":"https://joshuawiley.com/brmsmargins/reference/prediction.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Marginal Posterior Predictions from a 'brms' Model — prediction","text":"object fitted brms model object. Required. data data frame data table passed fitted() new data used predictions. Required. summarize logical value, whether calculate summaries posterior predictions. Defaults TRUE. posterior logical value whether save return posterior samples. Defaults FALSE assumption typical use case return summaries . index optional integer vector, giving posterior draws used calculations. omitted, defaults posterior draws. dpar Parameter passed dpar argument fitted() brms. Defaults NULL indicating mean location parameter typically. resample integer indicating number bootstrap resamples posterior predictions use calculating summaries. Defaults 0L. See documentation .averagePosterior() details. resampleseed seed random number generation. Defaults FALSE, means seed set. used resample positive, non-zero integer. See documentation .averagePosterior() details. effects character string indicating type prediction made. Can one “fixedonly” meaning use fixed effects, “includeRE” meaning random effects included predictions, “integrateoutRE” meaning random effects integrated / predictions. backtrans character string indicating type back transformation applied. Can one “response” meaning use response scale, “linear” “identity” meaning use linear predictor scale, specific back transformation desired, possible list “invlogit”, “exp”, “square”, “inverse”. Custom back transformations needed , example, outcome variable transformed prior fitting model. k integer providing number random draws use integrating random effects. relevant effects “integrateoutRE”. raw logical value indicating whether return raw output average Monte Carlo samples. Defaults FALSE. Setting TRUE can useful want full posterior distribution also k Monte Carlo samples used numerical integration. used summarize = TRUE. ... Additional arguments passed fitted()","code":""},{"path":"https://joshuawiley.com/brmsmargins/reference/prediction.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Marginal Posterior Predictions from a 'brms' Model — prediction","text":"list Summary Posterior. may NULL depending arguments used.","code":""},{"path":"https://joshuawiley.com/brmsmargins/reference/prediction.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Marginal Posterior Predictions from a 'brms' Model — prediction","text":"Pavlou, M., Ambler, G., Seaman, S., & Omar, R. Z. (2015) doi: 10.1186/s12874-015-0046-6  “note obtaining correct marginal predictions random intercepts model binary outcomes” Skrondal, ., & Rabe-Hesketh, S. (2009) doi: 10.1111/j.1467-985X.2009.00587.x  “Prediction multilevel generalized linear models”","code":""},{"path":"https://joshuawiley.com/brmsmargins/reference/rowBootMeans.html","id":null,"dir":"Reference","previous_headings":"","what":"Bootstrap Row Means — rowBootMeans","title":"Bootstrap Row Means — rowBootMeans","text":"takes numeric matrix, bootstrap resamples row, calculates mean. intended use case Bayesian posterior predictions sample data. Instead directly calculating average marginal effect (AME) across observed values, can bootstrapped, uncertainty target population, thus AME target population, can incorporated. Model uncertainty already assumed handled different posterior samples, assumed across rows.","code":""},{"path":"https://joshuawiley.com/brmsmargins/reference/rowBootMeans.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bootstrap Row Means — rowBootMeans","text":"","code":"rowBootMeans(x)"},{"path":"https://joshuawiley.com/brmsmargins/reference/rowBootMeans.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bootstrap Row Means — rowBootMeans","text":"x numeric matrix","code":""},{"path":"https://joshuawiley.com/brmsmargins/reference/rowBootMeans.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Bootstrap Row Means — rowBootMeans","text":"numeric vector simple bootstrapped row means matrix","code":""},{"path":"https://joshuawiley.com/brmsmargins/reference/rowBootMeans.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Bootstrap Row Means — rowBootMeans","text":"","code":"x <- matrix(1:9, byrow = TRUE, 3) replicate(10, rowBootMeans(x)) #>          [,1]     [,2]     [,3] [,4]     [,5]     [,6]     [,7]     [,8] #> [1,] 1.333333 1.666667 1.666667    2 2.666667 1.333333 1.666667 1.666667 #> [2,] 5.666667 4.666667 5.000000    5 5.333333 5.666667 6.000000 5.000000 #> [3,] 7.666667 7.333333 8.000000    8 8.000000 8.333333 8.666667 9.000000 #>          [,9]    [,10] #> [1,] 1.000000 2.333333 #> [2,] 6.000000 5.333333 #> [3,] 7.666667 8.666667"},{"path":"https://joshuawiley.com/brmsmargins/reference/tab2mat.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a Row of a Table to a Square Matrix — tab2mat","title":"Convert a Row of a Table to a Square Matrix — tab2mat","text":"Utility function convert row matrix square matrix. Used brms package returns things like Cholesky decomposition matrix separate columns rows posterior draws. intended called directly users.","code":""},{"path":"https://joshuawiley.com/brmsmargins/reference/tab2mat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a Row of a Table to a Square Matrix — tab2mat","text":"","code":"tab2mat(X)  tab2matR(X)"},{"path":"https://joshuawiley.com/brmsmargins/reference/tab2mat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a Row of a Table to a Square Matrix — tab2mat","text":"X matrix","code":""},{"path":"https://joshuawiley.com/brmsmargins/reference/tab2mat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert a Row of a Table to a Square Matrix — tab2mat","text":"numeric matrix one row.","code":""},{"path":"https://joshuawiley.com/brmsmargins/reference/tab2mat.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Convert a Row of a Table to a Square Matrix — tab2mat","text":"tab2matR: Pure R implementation tab2mat","code":""},{"path":"https://joshuawiley.com/brmsmargins/reference/tab2mat.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert a Row of a Table to a Square Matrix — tab2mat","text":"","code":"tab2mat(matrix(1:4, 1)) #>      [,1] [,2] #> [1,]    1    2 #> [2,]    3    4 tab2mat(matrix(1:9, 1)) #>      [,1] [,2] [,3] #> [1,]    1    2    3 #> [2,]    4    5    6 #> [3,]    7    8    9"},{"path":"https://joshuawiley.com/brmsmargins/news/index.html","id":"brmsmargins-011","dir":"Changelog","previous_headings":"","what":"brmsmargins 0.1.1","title":"brmsmargins 0.1.1","text":"CRAN release: 2021-12-16 Fixed bug preventing predictions integrating random effects mixed effects models random intercept (reported Issue#1). Thanks @ajnafa reporting. Added support Gamma Beta regression models. extensive testing added.","code":""},{"path":"https://joshuawiley.com/brmsmargins/news/index.html","id":"brmsmargins-010","dir":"Changelog","previous_headings":"","what":"brmsmargins 0.1.0","title":"brmsmargins 0.1.0","text":"Initial release","code":""}]
